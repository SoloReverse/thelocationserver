// Code generated by ent, DO NOT EDIT.

package user

import (
	"thelocationserver/ent/predicate"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/google/uuid"
)

// ID filters vertices based on their ID field.
func ID(id uuid.UUID) predicate.User {
	return predicate.User(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id uuid.UUID) predicate.User {
	return predicate.User(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id uuid.UUID) predicate.User {
	return predicate.User(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...uuid.UUID) predicate.User {
	return predicate.User(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...uuid.UUID) predicate.User {
	return predicate.User(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id uuid.UUID) predicate.User {
	return predicate.User(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id uuid.UUID) predicate.User {
	return predicate.User(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id uuid.UUID) predicate.User {
	return predicate.User(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id uuid.UUID) predicate.User {
	return predicate.User(sql.FieldLTE(FieldID, id))
}

// Username applies equality check predicate on the "username" field. It's identical to UsernameEQ.
func Username(v string) predicate.User {
	return predicate.User(sql.FieldEQ(FieldUsername, v))
}

// Phonenumber applies equality check predicate on the "phonenumber" field. It's identical to PhonenumberEQ.
func Phonenumber(v string) predicate.User {
	return predicate.User(sql.FieldEQ(FieldPhonenumber, v))
}

// PhotoURL applies equality check predicate on the "photoURL" field. It's identical to PhotoURLEQ.
func PhotoURL(v string) predicate.User {
	return predicate.User(sql.FieldEQ(FieldPhotoURL, v))
}

// Car applies equality check predicate on the "car" field. It's identical to CarEQ.
func Car(v string) predicate.User {
	return predicate.User(sql.FieldEQ(FieldCar, v))
}

// UsernameEQ applies the EQ predicate on the "username" field.
func UsernameEQ(v string) predicate.User {
	return predicate.User(sql.FieldEQ(FieldUsername, v))
}

// UsernameNEQ applies the NEQ predicate on the "username" field.
func UsernameNEQ(v string) predicate.User {
	return predicate.User(sql.FieldNEQ(FieldUsername, v))
}

// UsernameIn applies the In predicate on the "username" field.
func UsernameIn(vs ...string) predicate.User {
	return predicate.User(sql.FieldIn(FieldUsername, vs...))
}

// UsernameNotIn applies the NotIn predicate on the "username" field.
func UsernameNotIn(vs ...string) predicate.User {
	return predicate.User(sql.FieldNotIn(FieldUsername, vs...))
}

// UsernameGT applies the GT predicate on the "username" field.
func UsernameGT(v string) predicate.User {
	return predicate.User(sql.FieldGT(FieldUsername, v))
}

// UsernameGTE applies the GTE predicate on the "username" field.
func UsernameGTE(v string) predicate.User {
	return predicate.User(sql.FieldGTE(FieldUsername, v))
}

// UsernameLT applies the LT predicate on the "username" field.
func UsernameLT(v string) predicate.User {
	return predicate.User(sql.FieldLT(FieldUsername, v))
}

// UsernameLTE applies the LTE predicate on the "username" field.
func UsernameLTE(v string) predicate.User {
	return predicate.User(sql.FieldLTE(FieldUsername, v))
}

// UsernameContains applies the Contains predicate on the "username" field.
func UsernameContains(v string) predicate.User {
	return predicate.User(sql.FieldContains(FieldUsername, v))
}

// UsernameHasPrefix applies the HasPrefix predicate on the "username" field.
func UsernameHasPrefix(v string) predicate.User {
	return predicate.User(sql.FieldHasPrefix(FieldUsername, v))
}

// UsernameHasSuffix applies the HasSuffix predicate on the "username" field.
func UsernameHasSuffix(v string) predicate.User {
	return predicate.User(sql.FieldHasSuffix(FieldUsername, v))
}

// UsernameEqualFold applies the EqualFold predicate on the "username" field.
func UsernameEqualFold(v string) predicate.User {
	return predicate.User(sql.FieldEqualFold(FieldUsername, v))
}

// UsernameContainsFold applies the ContainsFold predicate on the "username" field.
func UsernameContainsFold(v string) predicate.User {
	return predicate.User(sql.FieldContainsFold(FieldUsername, v))
}

// PhonenumberEQ applies the EQ predicate on the "phonenumber" field.
func PhonenumberEQ(v string) predicate.User {
	return predicate.User(sql.FieldEQ(FieldPhonenumber, v))
}

// PhonenumberNEQ applies the NEQ predicate on the "phonenumber" field.
func PhonenumberNEQ(v string) predicate.User {
	return predicate.User(sql.FieldNEQ(FieldPhonenumber, v))
}

// PhonenumberIn applies the In predicate on the "phonenumber" field.
func PhonenumberIn(vs ...string) predicate.User {
	return predicate.User(sql.FieldIn(FieldPhonenumber, vs...))
}

// PhonenumberNotIn applies the NotIn predicate on the "phonenumber" field.
func PhonenumberNotIn(vs ...string) predicate.User {
	return predicate.User(sql.FieldNotIn(FieldPhonenumber, vs...))
}

// PhonenumberGT applies the GT predicate on the "phonenumber" field.
func PhonenumberGT(v string) predicate.User {
	return predicate.User(sql.FieldGT(FieldPhonenumber, v))
}

// PhonenumberGTE applies the GTE predicate on the "phonenumber" field.
func PhonenumberGTE(v string) predicate.User {
	return predicate.User(sql.FieldGTE(FieldPhonenumber, v))
}

// PhonenumberLT applies the LT predicate on the "phonenumber" field.
func PhonenumberLT(v string) predicate.User {
	return predicate.User(sql.FieldLT(FieldPhonenumber, v))
}

// PhonenumberLTE applies the LTE predicate on the "phonenumber" field.
func PhonenumberLTE(v string) predicate.User {
	return predicate.User(sql.FieldLTE(FieldPhonenumber, v))
}

// PhonenumberContains applies the Contains predicate on the "phonenumber" field.
func PhonenumberContains(v string) predicate.User {
	return predicate.User(sql.FieldContains(FieldPhonenumber, v))
}

// PhonenumberHasPrefix applies the HasPrefix predicate on the "phonenumber" field.
func PhonenumberHasPrefix(v string) predicate.User {
	return predicate.User(sql.FieldHasPrefix(FieldPhonenumber, v))
}

// PhonenumberHasSuffix applies the HasSuffix predicate on the "phonenumber" field.
func PhonenumberHasSuffix(v string) predicate.User {
	return predicate.User(sql.FieldHasSuffix(FieldPhonenumber, v))
}

// PhonenumberEqualFold applies the EqualFold predicate on the "phonenumber" field.
func PhonenumberEqualFold(v string) predicate.User {
	return predicate.User(sql.FieldEqualFold(FieldPhonenumber, v))
}

// PhonenumberContainsFold applies the ContainsFold predicate on the "phonenumber" field.
func PhonenumberContainsFold(v string) predicate.User {
	return predicate.User(sql.FieldContainsFold(FieldPhonenumber, v))
}

// PhotoURLEQ applies the EQ predicate on the "photoURL" field.
func PhotoURLEQ(v string) predicate.User {
	return predicate.User(sql.FieldEQ(FieldPhotoURL, v))
}

// PhotoURLNEQ applies the NEQ predicate on the "photoURL" field.
func PhotoURLNEQ(v string) predicate.User {
	return predicate.User(sql.FieldNEQ(FieldPhotoURL, v))
}

// PhotoURLIn applies the In predicate on the "photoURL" field.
func PhotoURLIn(vs ...string) predicate.User {
	return predicate.User(sql.FieldIn(FieldPhotoURL, vs...))
}

// PhotoURLNotIn applies the NotIn predicate on the "photoURL" field.
func PhotoURLNotIn(vs ...string) predicate.User {
	return predicate.User(sql.FieldNotIn(FieldPhotoURL, vs...))
}

// PhotoURLGT applies the GT predicate on the "photoURL" field.
func PhotoURLGT(v string) predicate.User {
	return predicate.User(sql.FieldGT(FieldPhotoURL, v))
}

// PhotoURLGTE applies the GTE predicate on the "photoURL" field.
func PhotoURLGTE(v string) predicate.User {
	return predicate.User(sql.FieldGTE(FieldPhotoURL, v))
}

// PhotoURLLT applies the LT predicate on the "photoURL" field.
func PhotoURLLT(v string) predicate.User {
	return predicate.User(sql.FieldLT(FieldPhotoURL, v))
}

// PhotoURLLTE applies the LTE predicate on the "photoURL" field.
func PhotoURLLTE(v string) predicate.User {
	return predicate.User(sql.FieldLTE(FieldPhotoURL, v))
}

// PhotoURLContains applies the Contains predicate on the "photoURL" field.
func PhotoURLContains(v string) predicate.User {
	return predicate.User(sql.FieldContains(FieldPhotoURL, v))
}

// PhotoURLHasPrefix applies the HasPrefix predicate on the "photoURL" field.
func PhotoURLHasPrefix(v string) predicate.User {
	return predicate.User(sql.FieldHasPrefix(FieldPhotoURL, v))
}

// PhotoURLHasSuffix applies the HasSuffix predicate on the "photoURL" field.
func PhotoURLHasSuffix(v string) predicate.User {
	return predicate.User(sql.FieldHasSuffix(FieldPhotoURL, v))
}

// PhotoURLEqualFold applies the EqualFold predicate on the "photoURL" field.
func PhotoURLEqualFold(v string) predicate.User {
	return predicate.User(sql.FieldEqualFold(FieldPhotoURL, v))
}

// PhotoURLContainsFold applies the ContainsFold predicate on the "photoURL" field.
func PhotoURLContainsFold(v string) predicate.User {
	return predicate.User(sql.FieldContainsFold(FieldPhotoURL, v))
}

// CarEQ applies the EQ predicate on the "car" field.
func CarEQ(v string) predicate.User {
	return predicate.User(sql.FieldEQ(FieldCar, v))
}

// CarNEQ applies the NEQ predicate on the "car" field.
func CarNEQ(v string) predicate.User {
	return predicate.User(sql.FieldNEQ(FieldCar, v))
}

// CarIn applies the In predicate on the "car" field.
func CarIn(vs ...string) predicate.User {
	return predicate.User(sql.FieldIn(FieldCar, vs...))
}

// CarNotIn applies the NotIn predicate on the "car" field.
func CarNotIn(vs ...string) predicate.User {
	return predicate.User(sql.FieldNotIn(FieldCar, vs...))
}

// CarGT applies the GT predicate on the "car" field.
func CarGT(v string) predicate.User {
	return predicate.User(sql.FieldGT(FieldCar, v))
}

// CarGTE applies the GTE predicate on the "car" field.
func CarGTE(v string) predicate.User {
	return predicate.User(sql.FieldGTE(FieldCar, v))
}

// CarLT applies the LT predicate on the "car" field.
func CarLT(v string) predicate.User {
	return predicate.User(sql.FieldLT(FieldCar, v))
}

// CarLTE applies the LTE predicate on the "car" field.
func CarLTE(v string) predicate.User {
	return predicate.User(sql.FieldLTE(FieldCar, v))
}

// CarContains applies the Contains predicate on the "car" field.
func CarContains(v string) predicate.User {
	return predicate.User(sql.FieldContains(FieldCar, v))
}

// CarHasPrefix applies the HasPrefix predicate on the "car" field.
func CarHasPrefix(v string) predicate.User {
	return predicate.User(sql.FieldHasPrefix(FieldCar, v))
}

// CarHasSuffix applies the HasSuffix predicate on the "car" field.
func CarHasSuffix(v string) predicate.User {
	return predicate.User(sql.FieldHasSuffix(FieldCar, v))
}

// CarEqualFold applies the EqualFold predicate on the "car" field.
func CarEqualFold(v string) predicate.User {
	return predicate.User(sql.FieldEqualFold(FieldCar, v))
}

// CarContainsFold applies the ContainsFold predicate on the "car" field.
func CarContainsFold(v string) predicate.User {
	return predicate.User(sql.FieldContainsFold(FieldCar, v))
}

// HasCars applies the HasEdge predicate on the "cars" edge.
func HasCars() predicate.User {
	return predicate.User(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2M, true, CarsTable, CarsPrimaryKey...),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasCarsWith applies the HasEdge predicate on the "cars" edge with a given conditions (other predicates).
func HasCarsWith(preds ...predicate.Car) predicate.User {
	return predicate.User(func(s *sql.Selector) {
		step := newCarsStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.User) predicate.User {
	return predicate.User(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.User) predicate.User {
	return predicate.User(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.User) predicate.User {
	return predicate.User(sql.NotPredicates(p))
}
