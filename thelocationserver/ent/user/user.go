// Code generated by ent, DO NOT EDIT.

package user

import (
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the user type in the database.
	Label = "user"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldUsername holds the string denoting the username field in the database.
	FieldUsername = "username"
	// FieldPhonenumber holds the string denoting the phonenumber field in the database.
	FieldPhonenumber = "phonenumber"
	// FieldPhotoURL holds the string denoting the photourl field in the database.
	FieldPhotoURL = "photo_url"
	// FieldCar holds the string denoting the car field in the database.
	FieldCar = "car"
	// EdgeCars holds the string denoting the cars edge name in mutations.
	EdgeCars = "cars"
	// Table holds the table name of the user in the database.
	Table = "users"
	// CarsTable is the table that holds the cars relation/edge. The primary key declared below.
	CarsTable = "car_carsowned"
	// CarsInverseTable is the table name for the Car entity.
	// It exists in this package in order to avoid circular dependency with the "car" package.
	CarsInverseTable = "cars"
)

// Columns holds all SQL columns for user fields.
var Columns = []string{
	FieldID,
	FieldUsername,
	FieldPhonenumber,
	FieldPhotoURL,
	FieldCar,
}

var (
	// CarsPrimaryKey and CarsColumn2 are the table columns denoting the
	// primary key for the cars relation (M2M).
	CarsPrimaryKey = []string{"car_id", "user_id"}
)

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

// OrderOption defines the ordering options for the User queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByUsername orders the results by the username field.
func ByUsername(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUsername, opts...).ToFunc()
}

// ByPhonenumber orders the results by the phonenumber field.
func ByPhonenumber(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldPhonenumber, opts...).ToFunc()
}

// ByPhotoURL orders the results by the photoURL field.
func ByPhotoURL(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldPhotoURL, opts...).ToFunc()
}

// ByCar orders the results by the car field.
func ByCar(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCar, opts...).ToFunc()
}

// ByCarsCount orders the results by cars count.
func ByCarsCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newCarsStep(), opts...)
	}
}

// ByCars orders the results by cars terms.
func ByCars(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newCarsStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}
func newCarsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(CarsInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2M, true, CarsTable, CarsPrimaryKey...),
	)
}
